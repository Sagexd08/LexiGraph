# Docker Compose configuration for Lexigraph
# Production-ready setup with GPU support, monitoring, and scaling

version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.backend
      target: production
    container_name: lexigraph-backend
    restart: unless-stopped
    environment:
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - MODEL_PATH=/app/models
      - DEVICE=auto
      - ENABLE_XFORMERS=true
      - ENABLE_CPU_OFFLOAD=true
      - ENABLE_ATTENTION_SLICING=true
      - MAX_CONCURRENT_REQUESTS=3
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=["http://localhost:3000", "https://lexigraph.example.com"]
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - /tmp:/tmp
    ports:
      - "8000:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - lexigraph-network

  # Frontend service
  frontend:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile.frontend
      target: production
    container_name: lexigraph-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lexigraph-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: lexigraph-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lexigraph-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lexigraph-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - lexigraph-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lexigraph-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - lexigraph-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: lexigraph-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - lexigraph-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  lexigraph-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
